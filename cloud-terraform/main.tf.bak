variable "zone_a" {
  description = "Yandex.Cloud Zone"
  default     = "ru-central1-a"
}
variable "zone_b" {
  description = "Yandex.Cloud Zone"
  default     = "ru-central1-b"
}


terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
  required_version = ">= 0.13"
}

provider "yandex" {
  token     = var.token
  cloud_id  = "b1g6lqgummp0f6chmuj5"
  folder_id = "b1gg1md6v9gjoiu7n44k"
  # zone      = var.zone_b
}

resource "yandex_compute_instance" "vm-nginx-1" {
  name = "vm-nginx-1"
  zone = var.zone_a

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 2
  }

  network_interface {
    subnet_id = "e9b4hv6eaka4coe4iodh"
    # subnet_id = yandex_vpc_subnet.sys-vpc-subnet.id
    nat       = true
  }

  boot_disk {
    initialize_params {
      image_id = var.boot_disk
    }
  }

  metadata = {
    user-data = "${file("./meta.txt")}"
    # ssh-keys  = "diplom:${file("/home/bondarenko/.ssh/id_rsa.pub")}"
    ssh-keys  = "bondarenko:${file("~/.ssh/id_rsa.pub")}"
    serial-port-enable = "1"
  }

}

resource "yandex_compute_instance" "vm-nginx-2" {
  name = "vm-nginx-2"
  zone = var.zone_b

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 2
  }

  network_interface {
    # subnet_id = yandex_vpc_subnet.sys-vpc-subnet.id
    subnet_id = "e2lnhk87ok2a5vjqglb9"
    nat       = true
  }

  boot_disk {
    initialize_params {
      image_id = var.boot_disk
    }
  }

  metadata = {
    user-data = "${file("./meta.txt")}"
    # ssh-keys  = "diplom:${file("/home/bondarenko/.ssh/id_rsa.pub")}"
    ssh-keys  = "bondarenko:${file("~/.ssh/id_rsa.pub")}"
    serial-port-enable = "1"
  }

}

resource "yandex_alb_target_group" "vm-nginx-servers" {
  name = "vm-nginx-servers"

  target {
    subnet_id = yandex_compute_instance.vm-nginx-1.network_interface[0].subnet_id
    ip_address = yandex_compute_instance.vm-nginx-1.network_interface[0].ip_address
  }

  target {
    subnet_id = yandex_compute_instance.vm-nginx-2.network_interface[0].subnet_id
    ip_address = yandex_compute_instance.vm-nginx-2.network_interface[0].ip_address
  }
}

resource "yandex_alb_backend_group" "backend_group" {
  name = "backend-group"

  http_backend{
    target_group_ids = ["${yandex_alb_target_group.vm-nginx-servers.id}"]

    name = "http-backend"
    weight = 1
    port = 80  

    healthcheck {
      timeout = "1s"
      interval = "1s"

      http_healthcheck {
        path = "/"
      }
    }
    http2 = "true"
  }
}

resource "yandex_alb_http_router" "http-router" {
  name      = "my-http-router"
}
# resource "yandex_alb_router" "http_router" {
#   name = "http-router"

#   action {
#     target_group_id = yandex_lb_backend_group.backend_group.id
#   }

#   http_rule {
#     priority = 1
#     hosts = ["*"]
#     paths = ["/*"]
#   }
# }

resource "yandex_alb_network_load_balancer" "web_lb" {
  name = "web-lb"
  network_id = "enpd1pseoa3f8qd2oom6"

  allocation_policy {
    location {
      zone_id   = "ru-central1-a"
      subnet_id = "e2lnhk87ok2a5vjqglb9"
    }
  }

  listener {
    name = "my-listener"
    endpoint {
      address {
        external_ipv4_address {
        }
      }
      ports = [ 80 ]
    }    
    http {
      handler {
        http_router_id = yandex_alb_http_router.http-router.id
      }
    }
  }
}
# resource "yandex_vpc_network" "sys-vpc-network" {
#   name = "sys-vpc-network"

# }

# resource "yandex_vpc_subnet" "sys-vpc-subnet" {
#   name           = "sys-vpc-subnet"
#   network_id     = "enpd1pseoa3f8qd2oom6" #yandex_vpc_network.sys-vpc-network.id
#   zone           = var.zone_b             # Замените на нужную вам зону
#   v4_cidr_blocks = ["10.0.1.0/24"]        # Замените на нужный вам диапазон IP-адресов
# }

output "external_ip_address_vm-nginx-1" {
  value = yandex_compute_instance.vm-nginx-1.network_interface.0.nat_ip_address
}

output "external_ip_address_vm-nginx-2" {
  value = yandex_compute_instance.vm-nginx-2.network_interface.0.nat_ip_address
}